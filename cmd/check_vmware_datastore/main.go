// Copyright 2021 Adam Chalkley
//
// https://github.com/atc0005/check-vmware
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package main

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/atc0005/go-nagios"
	"github.com/vmware/govmomi/units"

	"github.com/atc0005/check-vmware/internal/config"
	"github.com/atc0005/check-vmware/internal/vsphere"

	zlog "github.com/rs/zerolog/log"
)

func main() {

	// Start the timer. We'll use this to emit the plugin runtime as a
	// performance data metric.
	pluginStart := time.Now()

	// Set initial "state" as valid, adjust as we go.
	var nagiosExitState = nagios.ExitState{
		LastError:      nil,
		ExitStatusCode: nagios.StateOKExitCode,
	}

	// defer this from the start so it is the last deferred function to run
	defer nagiosExitState.ReturnCheckResults()

	// Disable library debug logging output by default
	// vsphere.EnableLogging()
	vsphere.DisableLogging()

	// Setup configuration by parsing user-provided flags. Note plugin type so
	// that only applicable CLI flags are exposed and any plugin-specific
	// settings are applied.
	cfg, cfgErr := config.New(config.PluginType{DatastoresSize: true})
	switch {
	case errors.Is(cfgErr, config.ErrVersionRequested):
		fmt.Println(config.Version())

		return

	case cfgErr != nil:
		// We're using the standalone Err function from rs/zerolog/log as we
		// do not have a working configuration.
		zlog.Err(cfgErr).Msg("Error initializing application")
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error initializing application",
			nagios.StateCRITICALLabel,
		)
		nagiosExitState.LastError = cfgErr
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	// Enable library-level logging if debug logging level is enabled app-wide
	if cfg.LoggingLevel == config.LogLevelDebug {
		vsphere.EnableLogging()
	}

	// Set context deadline equal to user-specified timeout value for plugin
	// runtime/execution.
	ctx, cancel := context.WithTimeout(context.Background(), cfg.Timeout())
	defer cancel()

	// Record thresholds for use as Nagios "Long Service Output" content. This
	// content is shown in the detailed web UI and in notifications generated
	// by Nagios.
	nagiosExitState.CriticalThreshold = fmt.Sprintf(
		"%d%% datastore usage",
		cfg.DatastoreUsageCritical,
	)

	nagiosExitState.WarningThreshold = fmt.Sprintf(
		"%d%% datastore usage",
		cfg.DatastoreUsageWarning,
	)

	if cfg.EmitBranding {
		// If enabled, show application details at end of notification
		nagiosExitState.BrandingCallback = config.Branding("Notification generated by ")
	}

	dcName := cfg.DatacenterName
	if dcName == "" {
		dcName = "not provided"
	}

	log := cfg.Log.With().
		Str("datastore_name", cfg.DatastoreName).
		Str("datacenter_name", dcName).
		Int("datastore_critical_usage", cfg.DatastoreUsageCritical).
		Int("datastore_warning_usage", cfg.DatastoreUsageWarning).
		Logger()

	log.Debug().Msg("Logging into vSphere environment")
	c, loginErr := vsphere.Login(
		ctx, cfg.Server, cfg.Port, cfg.TrustCert,
		cfg.Username, cfg.Domain, cfg.Password,
		cfg.UserAgent(),
	)
	if loginErr != nil {
		log.Error().Err(loginErr).Msgf("error logging into %s", cfg.Server)

		nagiosExitState.LastError = loginErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error logging into %q",
			nagios.StateCRITICALLabel,
			cfg.Server,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}
	log.Debug().Msg("Successfully logged into vSphere environment")

	defer func() {
		if err := c.Logout(ctx); err != nil {
			log.Error().
				Err(err).
				Msg("failed to logout")
		}
	}()

	// At this point we're logged in, ready to retrieve the requested
	// datastore.

	log.Debug().Msg("Retrieving datastore by name")
	datastore, dsFetchErr := vsphere.GetDatastoreByName(
		ctx,
		c.Client,
		cfg.DatastoreName,
		cfg.DatacenterName,
		true,
	)
	if dsFetchErr != nil {
		log.Error().Err(dsFetchErr).Msg(
			"error retrieving requested datastore",
		)

		nagiosExitState.LastError = dsFetchErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error retrieving datastore %q",
			nagios.StateCRITICALLabel,
			cfg.DatastoreName,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().Msg("Successfully retrieved datastore by name")

	log.Debug().Msg("Generating datastore usage summary")
	dsUsage, dsUsageErr := vsphere.NewDatastoreUsageSummary(
		ctx,
		c.Client,
		datastore,
		cfg.DatastoreUsageCritical,
		cfg.DatastoreUsageWarning,
	)
	if dsUsageErr != nil {
		log.Error().Err(dsUsageErr).Msg(
			"error generating datastore usage summary",
		)

		nagiosExitState.LastError = dsUsageErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error generating summary for datastore %q",
			nagios.StateCRITICALLabel,
			cfg.DatastoreName,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().Msg("Successfully generated datastore usage summary")

	log.Debug().
		Str("datastore_name", datastore.Name).
		Float64("datastore_usage_used_percentage", dsUsage.StorageUsedPercent).
		Float64("datastore_usage_remaining_percentage", dsUsage.StorageRemainingPercent).
		Str("datastore_storage_total", units.ByteSize(dsUsage.StorageTotal).String()).
		Str("datastore_storage_used", units.ByteSize(dsUsage.StorageUsed).String()).
		Str("datastore_storage_remaining", units.ByteSize(dsUsage.StorageRemaining).String()).
		Int("datastore_critical_threshold", dsUsage.CriticalThreshold).
		Int("datastore_warning_threshold", dsUsage.WarningThreshold).
		Int("vms", len(dsUsage.VMs)).
		Int("vms_powered_off", dsUsage.VMs.NumVMsPoweredOff()).
		Int("vms_powered_on", dsUsage.VMs.NumVMsPoweredOn()).
		Int("datastore_warning_threshold", dsUsage.WarningThreshold).
		Msg("Datastore usage summary")

	log.Debug().Msg("Compiling Performance Data details")

	pd := []nagios.PerformanceData{
		{
			Label: "time",
			Value: fmt.Sprintf("%dms", time.Since(pluginStart).Milliseconds()),
		},
		{
			Label:             "datastore_usage",
			Value:             fmt.Sprintf("%.2f", dsUsage.StorageUsedPercent),
			UnitOfMeasurement: "%",
			Warn:              fmt.Sprintf("%d", dsUsage.WarningThreshold),
			Crit:              fmt.Sprintf("%d", dsUsage.CriticalThreshold),
		},
		{
			Label:             "datastore_storage_remaining",
			Value:             fmt.Sprintf("%d", dsUsage.StorageRemaining),
			UnitOfMeasurement: "B",
			Max:               fmt.Sprintf("%d", dsUsage.StorageTotal),
			Min:               "0",
		},
		{
			Label: "vms",
			Value: fmt.Sprintf("%d", len(dsUsage.VMs)),
		},
		{
			Label: "vms_powered_off",
			Value: fmt.Sprintf("%d", dsUsage.VMs.NumVMsPoweredOff()),
		},
		{
			Label: "vms_powered_on",
			Value: fmt.Sprintf("%d", dsUsage.VMs.NumVMsPoweredOn()),
		},
	}

	log.Debug().Msg("Evaluating datastore usage state")
	switch {
	case dsUsage.IsCriticalState():

		log.Error().
			Str("datastore_name", datastore.Name).
			Float64("datastore_usage_used_percentage", dsUsage.StorageUsedPercent).
			Float64("datastore_usage_remaining_percentage", dsUsage.StorageRemainingPercent).
			Str("datastore_storage_remaining", units.ByteSize(dsUsage.StorageRemaining).String()).
			Msg("Datastore usage CRITICAL")

		nagiosExitState.LastError = vsphere.ErrDatastoreUsageThresholdCrossed

		nagiosExitState.ServiceOutput = vsphere.DatastoreUsageOneLineCheckSummary(
			nagios.StateCRITICALLabel,
			dsUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.DatastoreUsageReport(
			c.Client,
			dsUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return

	case dsUsage.IsWarningState():

		log.Error().
			Str("datastore_name", datastore.Name).
			Float64("datastore_usage_used_percentage", dsUsage.StorageUsedPercent).
			Float64("datastore_usage_remaining_percentage", dsUsage.StorageRemainingPercent).
			Str("datastore_storage_remaining", units.ByteSize(dsUsage.StorageRemaining).String()).
			Msg("Datastore usage CRITICAL")

		nagiosExitState.LastError = vsphere.ErrDatastoreUsageThresholdCrossed

		nagiosExitState.ServiceOutput = vsphere.DatastoreUsageOneLineCheckSummary(
			nagios.StateWARNINGLabel,
			dsUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.DatastoreUsageReport(
			c.Client,
			dsUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateWARNINGExitCode

		return

	default:

		nagiosExitState.LastError = nil

		nagiosExitState.ServiceOutput = vsphere.DatastoreUsageOneLineCheckSummary(
			nagios.StateOKLabel,
			dsUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.DatastoreUsageReport(
			c.Client,
			dsUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateOKExitCode

		return

	}

}
