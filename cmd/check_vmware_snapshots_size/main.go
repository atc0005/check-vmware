// Copyright 2021 Adam Chalkley
//
// https://github.com/atc0005/check-vmware
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package main

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/atc0005/go-nagios"

	"github.com/atc0005/check-vmware/internal/config"
	"github.com/atc0005/check-vmware/internal/vsphere"

	zlog "github.com/rs/zerolog/log"
)

//go:generate go-winres make --product-version=git-tag --file-version=git-tag

func main() {

	plugin := nagios.NewPlugin()

	// defer this from the start so it is the last deferred function to run
	defer plugin.ReturnCheckResults()

	// Annotate all errors (if any) with remediation advice just before ending
	// plugin execution.
	defer vsphere.AnnotateError(plugin)

	// Setup configuration by parsing user-provided flags. Note plugin type so
	// that only applicable CLI flags are exposed and any plugin-specific
	// settings are applied.
	cfg, cfgErr := config.New(config.PluginType{SnapshotsSize: true})
	switch {
	case errors.Is(cfgErr, config.ErrVersionRequested):
		fmt.Println(config.Version())

		return

	case cfgErr != nil:
		// We're using the standalone Err function from rs/zerolog/log as we
		// do not have a working configuration.
		zlog.Err(cfgErr).Msg("Error initializing application")
		plugin.ServiceOutput = fmt.Sprintf(
			"%s: Error initializing application",
			nagios.StateUNKNOWNLabel,
		)
		plugin.AddError(cfgErr)
		plugin.ExitStatusCode = nagios.StateUNKNOWNExitCode

		return
	}

	// Enable library-level logging if debug or greater logging level is
	// enabled app-wide.
	handleLibraryLogging()

	// Set context deadline equal to user-specified timeout value for plugin
	// runtime/execution.
	ctx, cancel := context.WithTimeout(context.Background(), cfg.Timeout())
	defer cancel()

	// Record thresholds for use as Nagios "Long Service Output" content. This
	// content is shown in the detailed web UI and in notifications generated
	// by Nagios.
	plugin.CriticalThreshold = fmt.Sprintf(
		"snapshots of %d GB (combined size) present",
		cfg.SnapshotsSizeCritical,
	)

	plugin.WarningThreshold = fmt.Sprintf(
		"snapshots of %d GB (combined size) present",
		cfg.SnapshotsSizeWarning,
	)

	if cfg.EmitBranding {
		// If enabled, show application details at end of notification
		plugin.BrandingCallback = config.Branding("Notification generated by ")
	}

	log := cfg.Log.With().
		Str("included_resource_pools", cfg.IncludedResourcePools.String()).
		Str("excluded_resource_pools", cfg.ExcludedResourcePools.String()).
		Str("ignored_vms", cfg.IgnoredVMs.String()).
		Int("snapshots_size_critical", cfg.SnapshotsSizeCritical).
		Int("snapshots_size_warning", cfg.SnapshotsSizeWarning).
		Logger()

	log.Debug().Msg("Logging into vSphere environment")
	c, loginErr := vsphere.Login(
		ctx, cfg.Server, cfg.Port, cfg.TrustCert,
		cfg.Username, cfg.Domain, cfg.Password,
		cfg.UserAgent(),
	)
	if loginErr != nil {
		log.Error().Err(loginErr).Msgf("error logging into %s", cfg.Server)

		plugin.AddError(loginErr)
		plugin.ServiceOutput = fmt.Sprintf(
			"%s: Error logging into %q",
			nagios.StateCRITICALLabel,
			cfg.Server,
		)
		plugin.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}
	log.Debug().Msg("Successfully logged into vSphere environment")

	defer func() {
		if err := c.Logout(ctx); err != nil {
			log.Error().
				Err(err).
				Msg("failed to logout")
		}
	}()

	log.Debug().Msg("Performing initial filtering of vms")
	vmsFilterOptions := vsphere.VMsFilterOptions{
		ResourcePoolsIncluded:       cfg.IncludedResourcePools,
		ResourcePoolsExcluded:       cfg.ExcludedResourcePools,
		FoldersIncluded:             cfg.IncludedFolders,
		FoldersExcluded:             cfg.ExcludedFolders,
		VirtualMachineNamesExcluded: cfg.IgnoredVMs,

		// NOTE: This plugin is hard-coded to evaluate powered off and powered
		// on VMs equally. I'm not sure whether ignoring powered off VMs by
		// default makes sense for this particular plugin.
		//
		// Please share your feedback here if you feel differently:
		// https://github.com/atc0005/check-vmware/discussions/177
		//
		// Please expand on some use cases for ignoring powered off VMs by
		// default.
		// IncludePoweredOff:           cfg.PoweredOff,
		IncludePoweredOff: true,
	}
	vmsFilterResults, vmsFilterErr := vsphere.FilterVMs(
		ctx,
		c.Client,
		vmsFilterOptions,
	)
	if vmsFilterErr != nil {
		log.Error().Err(vmsFilterErr).Msg(
			"error filtering VMs",
		)

		plugin.AddError(vmsFilterErr)
		plugin.ServiceOutput = fmt.Sprintf(
			"%s: Error filtering VMs",
			nagios.StateCRITICALLabel,
		)
		plugin.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}
	log.Debug().Msg("Finished initial filtering of vms")

	log.Debug().Msg("Filter VMs to those with snapshots")
	vmsWithSnapshots, numVMsExcludedBySnapshots := vsphere.FilterVMsWithSnapshots(vmsFilterResults.VMsAfterFiltering())

	log.Debug().
		Str("vms_filtered_by_snapshot_state", strings.Join(vsphere.VMNames(vmsWithSnapshots), ", ")).
		Int("vms_excluded_by_snapshot_state", numVMsExcludedBySnapshots).
		Msg("VMs after snapshot filtering")

	log.Debug().Msg("Build snapshot sets for bulk processing")
	snapshotSets := make(vsphere.SnapshotSummarySets, 0, len(vmsWithSnapshots))

	snapshotThresholds := vsphere.SnapshotThresholds{
		SizeCritical: cfg.SnapshotsSizeCritical,
		SizeWarning:  cfg.SnapshotsSizeWarning,
	}

	for _, vm := range vmsWithSnapshots {

		log.Debug().Str("vm", vm.Name).Msg("Evaluating snapshots for VM")

		snapshotSets = append(
			snapshotSets,
			vsphere.NewSnapshotSummarySet(
				vm,
				snapshotThresholds,
			),
		)
	}

	log.Debug().Msg("Compiling Performance Data details")

	numVMsWithCriticalSnapshots, numCriticalSnapshots := snapshotSets.SizeCriticalSnapshots()
	numVMsWithWarningSnapshots, numWarningSnapshots := snapshotSets.SizeWarningSnapshots()
	numSnapshots := snapshotSets.Snapshots()

	pd := append(
		vsphere.VMFilterResultsPerfData(vmsFilterResults),
		[]nagios.PerformanceData{
			// The `time` (runtime) metric is appended at plugin exit, so do not
			// duplicate it here.
			{
				Label: "vms_with_critical_snapshots",
				Value: fmt.Sprintf("%d", numVMsWithCriticalSnapshots),
			},
			{
				Label: "vms_with_warning_snapshots",
				Value: fmt.Sprintf("%d", numVMsWithWarningSnapshots),
			},
			{
				Label: "snapshots",
				Value: fmt.Sprintf("%d", numSnapshots),
			},
			{
				Label: "critical_snapshots",
				Value: fmt.Sprintf("%d", numCriticalSnapshots),
			},
			{
				Label: "warning_snapshots",
				Value: fmt.Sprintf("%d", numWarningSnapshots),
			},
		}...,
	)

	if err := plugin.AddPerfData(false, pd...); err != nil {
		log.Error().
			Err(err).
			Msg("failed to add performance data")

		// Surface the error in plugin output.
		plugin.AddError(err)

		plugin.ExitStatusCode = nagios.StateUNKNOWNExitCode
		plugin.ServiceOutput = fmt.Sprintf(
			"%s: Failed to process performance data metrics",
			nagios.StateUNKNOWNLabel,
		)

		return
	}

	// Update logger with new performance data related fields
	log = log.With().
		Int("resource_pools_evaluated", vmsFilterResults.NumRPsAfterFiltering()).
		Int("vms_total", vmsFilterResults.NumVMsAll()).
		Int("vms_after_filtering", vmsFilterResults.NumVMsAfterFiltering()).
		Int("vms_excluded_by_name", vmsFilterResults.NumVMsExcludedByName()).
		Int("snapshots_total", numSnapshots).
		Int("num_vms_with_critical_snapshots", numVMsWithCriticalSnapshots).
		Int("num_snapshots_size_critical", numCriticalSnapshots).
		Int("num_vms_with_warning_snapshots", numVMsWithWarningSnapshots).
		Int("num_snapshots_size_warning", numWarningSnapshots).
		Logger()

	switch {

	case snapshotSets.IsSizeCriticalState():

		vmsWithLargeCumulativeSnapshots, largeSnapshots := snapshotSets.ExceedsSize(cfg.SnapshotsSizeCritical)

		log.Error().
			Int("num_vms_with_critical_snapshots", vmsWithLargeCumulativeSnapshots).
			Int("num_snapshots_size_critical", largeSnapshots).
			Msg("Snapshot sets contain a snapshot which exceeds specified size in GB")

		plugin.AddError(vsphere.ErrSnapshotSizeThresholdCrossed)

		plugin.ServiceOutput = vsphere.SnapshotsSizeOneLineCheckSummary(
			nagios.StateCRITICALLabel,
			snapshotSets,
			snapshotThresholds,
			vmsFilterResults,
		)

		plugin.LongServiceOutput = vsphere.SnapshotsSizeReport(
			c.Client,
			snapshotSets,
			snapshotThresholds,
			vmsFilterOptions,
			vmsFilterResults,
		)

		plugin.ExitStatusCode = nagios.StateCRITICALExitCode

		return

	case snapshotSets.IsSizeWarningState():

		vmsWithLargeCumulativeSnapshots, largeSnapshots := snapshotSets.ExceedsSize(cfg.SnapshotsSizeWarning)

		log.Error().
			Int("num_vms_with_warning_snapshots", vmsWithLargeCumulativeSnapshots).
			Int("num_snapshots_size_warning", largeSnapshots).
			Msg("Snapshot sets contain a snapshot which exceeds specified size in GB")

		plugin.AddError(vsphere.ErrSnapshotSizeThresholdCrossed)

		plugin.ServiceOutput = vsphere.SnapshotsSizeOneLineCheckSummary(
			nagios.StateWARNINGLabel,
			snapshotSets,
			snapshotThresholds,
			vmsFilterResults,
		)

		plugin.LongServiceOutput = vsphere.SnapshotsSizeReport(
			c.Client,
			snapshotSets,
			snapshotThresholds,
			vmsFilterOptions,
			vmsFilterResults,
		)

		plugin.ExitStatusCode = nagios.StateWARNINGExitCode

		return

	default:

		plugin.ServiceOutput = vsphere.SnapshotsSizeOneLineCheckSummary(
			nagios.StateOKLabel,
			snapshotSets,
			snapshotThresholds,
			vmsFilterResults,
		)

		plugin.LongServiceOutput = vsphere.SnapshotsSizeReport(
			c.Client,
			snapshotSets,
			snapshotThresholds,
			vmsFilterOptions,
			vmsFilterResults,
		)

		plugin.ExitStatusCode = nagios.StateOKExitCode

		return

	}

}
