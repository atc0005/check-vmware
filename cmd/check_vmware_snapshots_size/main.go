// Copyright 2021 Adam Chalkley
//
// https://github.com/atc0005/check-vmware
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package main

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/atc0005/go-nagios"
	"github.com/vmware/govmomi/vim25/mo"

	"github.com/atc0005/check-vmware/internal/config"
	"github.com/atc0005/check-vmware/internal/vsphere"

	zlog "github.com/rs/zerolog/log"
)

func main() {

	// Start the timer. We'll use this to emit the plugin runtime as a
	// performance data metric.
	pluginStart := time.Now()

	// Set initial "state" as valid, adjust as we go.
	var nagiosExitState = nagios.ExitState{
		LastError:      nil,
		ExitStatusCode: nagios.StateOKExitCode,
	}

	// defer this from the start so it is the last deferred function to run
	defer nagiosExitState.ReturnCheckResults()

	// Disable library debug logging output by default
	// vsphere.EnableLogging()
	vsphere.DisableLogging()

	// Setup configuration by parsing user-provided flags. Note plugin type so
	// that only applicable CLI flags are exposed and any plugin-specific
	// settings are applied.
	cfg, cfgErr := config.New(config.PluginType{SnapshotsSize: true})
	switch {
	case errors.Is(cfgErr, config.ErrVersionRequested):
		fmt.Println(config.Version())

		return

	case cfgErr != nil:
		// We're using the standalone Err function from rs/zerolog/log as we
		// do not have a working configuration.
		zlog.Err(cfgErr).Msg("Error initializing application")
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error initializing application",
			nagios.StateCRITICALLabel,
		)
		nagiosExitState.LastError = cfgErr
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	// Enable library-level logging if debug logging level is enabled app-wide
	if cfg.LoggingLevel == config.LogLevelDebug {
		vsphere.EnableLogging()
	}

	// Set context deadline equal to user-specified timeout value for plugin
	// runtime/execution.
	ctx, cancel := context.WithTimeout(context.Background(), cfg.Timeout())
	defer cancel()

	// Record thresholds for use as Nagios "Long Service Output" content. This
	// content is shown in the detailed web UI and in notifications generated
	// by Nagios.
	nagiosExitState.CriticalThreshold = fmt.Sprintf(
		"snapshots of %d GB (combined size) present",
		cfg.SnapshotsSizeCritical,
	)

	nagiosExitState.WarningThreshold = fmt.Sprintf(
		"snapshots of %d GB (combined size) present",
		cfg.SnapshotsSizeWarning,
	)

	if cfg.EmitBranding {
		// If enabled, show application details at end of notification
		nagiosExitState.BrandingCallback = config.Branding("Notification generated by ")
	}

	log := cfg.Log.With().
		Str("included_resource_pools", cfg.IncludedResourcePools.String()).
		Str("excluded_resource_pools", cfg.ExcludedResourcePools.String()).
		Str("ignored_vms", cfg.IgnoredVMs.String()).
		Int("snapshots_size_critical", cfg.SnapshotsSizeCritical).
		Int("snapshots_size_warning", cfg.SnapshotsSizeWarning).
		Logger()

	log.Debug().Msg("Logging into vSphere environment")
	c, loginErr := vsphere.Login(
		ctx, cfg.Server, cfg.Port, cfg.TrustCert,
		cfg.Username, cfg.Domain, cfg.Password,
		cfg.UserAgent(),
	)
	if loginErr != nil {
		log.Error().Err(loginErr).Msgf("error logging into %s", cfg.Server)

		nagiosExitState.LastError = loginErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error logging into %q",
			nagios.StateCRITICALLabel,
			cfg.Server,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}
	log.Debug().Msg("Successfully logged into vSphere environment")

	defer func() {
		if err := c.Logout(ctx); err != nil {
			log.Error().
				Err(err).
				Msg("failed to logout")
		}
	}()

	// At this point we're logged in, ready to retrieve a list of VMs. If
	// specified, we should limit VMs based on include/exclude lists. First,
	// we'll make sure that all specified resource pools actually exist in the
	// vSphere environment.

	log.Debug().Msg("Validating resource pools")
	validateErr := vsphere.ValidateRPs(ctx, c.Client, cfg.IncludedResourcePools, cfg.ExcludedResourcePools)
	if validateErr != nil {
		log.Error().Err(validateErr).Msg("error validating include/exclude lists")

		nagiosExitState.LastError = validateErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error validating include/exclude lists",
			nagios.StateCRITICALLabel,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().Msg("Retrieving eligible resource pools")
	resourcePools, getRPsErr := vsphere.GetEligibleRPs(
		ctx,
		c.Client,
		cfg.IncludedResourcePools,
		cfg.ExcludedResourcePools,
		true,
	)
	if getRPsErr != nil {
		log.Error().Err(getRPsErr).Msg(
			"error retrieving list of resource pools",
		)

		nagiosExitState.LastError = getRPsErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error retrieving list of resource pools from %q",
			nagios.StateCRITICALLabel,
			cfg.Server,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	rpNames := make([]string, 0, len(resourcePools))
	for _, rp := range resourcePools {
		rpNames = append(rpNames, rp.Name)
	}

	log.Debug().
		Str("resource_pools", strings.Join(rpNames, ", ")).
		Msg("")

	log.Debug().Msg("Retrieving vms from eligible resource pools")
	rpEntityVals := make([]mo.ManagedEntity, 0, len(resourcePools))
	for i := range resourcePools {
		rpEntityVals = append(rpEntityVals, resourcePools[i].ManagedEntity)
	}
	vms, getVMsErr := vsphere.GetVMsFromContainer(ctx, c.Client, true, rpEntityVals...)
	if getVMsErr != nil {
		log.Error().Err(getVMsErr).Msg(
			"error retrieving list of VMs from resource pools list",
		)

		nagiosExitState.LastError = getVMsErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error retrieving list of VMs from resource pools list",
			nagios.StateCRITICALLabel,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().
		Str("vms_evaluated", strings.Join(vsphere.VMNames(vms), ", ")).
		Msg("Evaluated Virtual Machines")

	log.Debug().Msg("Drop any VMs we've been asked to exclude from checks")
	filteredVMs, numVMsExcludedByName := vsphere.ExcludeVMsByName(vms, cfg.IgnoredVMs)

	log.Debug().
		Str("vms_filtered_by_name", strings.Join(vsphere.VMNames(filteredVMs), ", ")).
		Int("vms_excluded_by_name", numVMsExcludedByName).
		Msg("VMs after name filtering")

	// NOTE: This plugin is hard-coded to evaluate powered off and powered
	// on VMs equally. I'm not sure whether ignoring powered off VMs by
	// default makes sense for this particular plugin.
	//
	// Please share your feedback here if you feel differently:
	// https://github.com/atc0005/check-vmware/discussions/177
	//
	// Please expand on some use cases for ignoring powered off VMs by default.
	//
	// 	log.Debug().Msg("Filter VMs to specified power state")
	// 	filteredVMs, numVMsExcludedByPowerState := vsphere.FilterVMsByPowerState(filteredVMs, cfg.PoweredOff)
	//
	// 	log.Debug().
	// 		Str("vms_filtered_by_power_state", strings.Join(vsphere.VMNames(filteredVMs), ", ")).
	// 		Int("vms_excluded_by_power_state", numVMsExcludedByPowerState).
	// 		Msg("VMs after power state filtering")

	log.Debug().Msg("Filter VMs to those with snapshots")
	vmsWithSnapshots, numVMsExcludedBySnapshots := vsphere.FilterVMsWithSnapshots(filteredVMs)

	log.Debug().
		Str("vms_filtered_by_snapshot_state", strings.Join(vsphere.VMNames(vmsWithSnapshots), ", ")).
		Int("vms_excluded_by_snapshot_state", numVMsExcludedBySnapshots).
		Msg("VMs after snapshot filtering")

	log.Debug().Msg("Build snapshot sets for bulk processing")
	snapshotSets := make(vsphere.SnapshotSummarySets, 0, len(vmsWithSnapshots))

	snapshotThresholds := vsphere.SnapshotThresholds{
		SizeCritical: cfg.SnapshotsSizeCritical,
		SizeWarning:  cfg.SnapshotsSizeWarning,
	}

	for _, vm := range vmsWithSnapshots {

		log.Debug().Str("vm", vm.Name).Msg("Evaluating snapshots for VM")

		snapshotSets = append(
			snapshotSets,
			vsphere.NewSnapshotSummarySet(
				vm,
				snapshotThresholds,
			),
		)
	}

	log.Debug().Msg("Compiling Performance Data details")

	numVMsWithCriticalSnapshots, numCriticalSnapshots := snapshotSets.SizeCriticalSnapshots()
	numVMsWithWarningSnapshots, numWarningSnapshots := snapshotSets.SizeWarningSnapshots()
	numSnapshots := snapshotSets.Snapshots()

	pd := []nagios.PerformanceData{
		{
			Label: "time",
			Value: fmt.Sprintf("%dms", time.Since(pluginStart).Milliseconds()),
		},
		{
			Label: "vms",
			Value: fmt.Sprintf("%d", len(vms)),
		},
		{
			Label: "vms_with_critical_snapshots",
			Value: fmt.Sprintf("%d", numVMsWithCriticalSnapshots),
		},
		{
			Label: "vms_with_warning_snapshots",
			Value: fmt.Sprintf("%d", numVMsWithWarningSnapshots),
		},
		{
			Label: "snapshots",
			Value: fmt.Sprintf("%d", numSnapshots),
		},
		{
			Label: "critical_snapshots",
			Value: fmt.Sprintf("%d", numCriticalSnapshots),
		},
		{
			Label: "warning_snapshots",
			Value: fmt.Sprintf("%d", numWarningSnapshots),
		},
		{
			Label: "resource_pools_excluded",
			Value: fmt.Sprintf("%d", len(cfg.ExcludedResourcePools)),
		},
		{
			Label: "resource_pools_included",
			Value: fmt.Sprintf("%d", len(cfg.IncludedResourcePools)),
		},
		{
			Label: "resource_pools_evaluated",
			Value: fmt.Sprintf("%d", len(resourcePools)),
		},
	}

	// Update logger with new performance data related fields
	log = log.With().
		Int("vms_total", len(vms)).
		Int("snapshots_total", numSnapshots).
		Int("vms_filtered", len(filteredVMs)).
		Int("vms_excluded_by_name", numVMsExcludedByName).
		Int("num_vms_with_critical_snapshots", numVMsWithCriticalSnapshots).
		Int("num_snapshots_size_critical", numCriticalSnapshots).
		Int("num_vms_with_warning_snapshots", numVMsWithWarningSnapshots).
		Int("num_snapshots_size_warning", numWarningSnapshots).
		Int("resource_pools_evaluated", len(resourcePools)).
		Logger()

	switch {

	case snapshotSets.IsSizeCriticalState():

		vmsWithLargeCumulativeSnapshots, largeSnapshots := snapshotSets.ExceedsSize(cfg.SnapshotsSizeCritical)

		log.Error().
			Int("num_vms_with_critical_snapshots", vmsWithLargeCumulativeSnapshots).
			Int("num_snapshots_size_critical", largeSnapshots).
			Msg("Snapshot sets contain a snapshot which exceeds specified size in GB")

		nagiosExitState.LastError = vsphere.ErrSnapshotSizeThresholdCrossed

		nagiosExitState.ServiceOutput = vsphere.SnapshotsSizeOneLineCheckSummary(
			nagios.StateCRITICALLabel,
			snapshotSets,
			filteredVMs,
			resourcePools,
		)

		nagiosExitState.LongServiceOutput = vsphere.SnapshotsSizeReport(
			c.Client,
			snapshotSets,
			vms,
			filteredVMs,
			vmsWithSnapshots,
			cfg.IgnoredVMs,
			cfg.PoweredOff,
			cfg.IncludedResourcePools,
			cfg.ExcludedResourcePools,
			resourcePools,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return

	case snapshotSets.IsSizeWarningState():

		vmsWithLargeCumulativeSnapshots, largeSnapshots := snapshotSets.ExceedsSize(cfg.SnapshotsSizeWarning)

		log.Error().
			Int("num_vms_with_warning_snapshots", vmsWithLargeCumulativeSnapshots).
			Int("num_snapshots_size_warning", largeSnapshots).
			Msg("Snapshot sets contain a snapshot which exceeds specified size in GB")

		nagiosExitState.LastError = vsphere.ErrSnapshotSizeThresholdCrossed

		nagiosExitState.ServiceOutput = vsphere.SnapshotsSizeOneLineCheckSummary(
			nagios.StateWARNINGLabel,
			snapshotSets,
			filteredVMs,
			resourcePools,
		)

		nagiosExitState.LongServiceOutput = vsphere.SnapshotsSizeReport(
			c.Client,
			snapshotSets,
			vms,
			filteredVMs,
			vmsWithSnapshots,
			cfg.IgnoredVMs,
			cfg.PoweredOff,
			cfg.IncludedResourcePools,
			cfg.ExcludedResourcePools,
			resourcePools,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateWARNINGExitCode

		return

	default:

		nagiosExitState.LastError = nil

		nagiosExitState.ServiceOutput = vsphere.SnapshotsSizeOneLineCheckSummary(
			nagios.StateOKLabel,
			snapshotSets,
			filteredVMs,
			resourcePools,
		)

		nagiosExitState.LongServiceOutput = vsphere.SnapshotsSizeReport(
			c.Client,
			snapshotSets,
			vms,
			filteredVMs,
			vmsWithSnapshots,
			cfg.IgnoredVMs,
			cfg.PoweredOff,
			cfg.IncludedResourcePools,
			cfg.ExcludedResourcePools,
			resourcePools,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateOKExitCode

		return

	}

}
