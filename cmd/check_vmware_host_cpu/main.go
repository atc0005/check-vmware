// Copyright 2021 Adam Chalkley
//
// https://github.com/atc0005/check-vmware
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package main

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/atc0005/go-nagios"
	"github.com/vmware/govmomi/vim25/types"

	"github.com/atc0005/check-vmware/internal/config"
	"github.com/atc0005/check-vmware/internal/vsphere"

	zlog "github.com/rs/zerolog/log"
)

func main() {

	// Start the timer. We'll use this to emit the plugin runtime as a
	// performance data metric.
	pluginStart := time.Now()

	// Set initial "state" as valid, adjust as we go.
	var nagiosExitState = nagios.ExitState{
		LastError:      nil,
		ExitStatusCode: nagios.StateOKExitCode,
	}

	// defer this from the start so it is the last deferred function to run
	defer nagiosExitState.ReturnCheckResults()

	// Track plugin runtime, emit this metric regardless of exit point/cause.
	defer func(exitState *nagios.ExitState, start time.Time) {
		runtimeMetric := nagios.PerformanceData{
			Label: "time",
			Value: fmt.Sprintf("%dms", time.Since(start).Milliseconds()),
		}
		if err := exitState.AddPerfData(false, runtimeMetric); err != nil {
			zlog.Error().
				Err(err).
				Msg("failed to add time (runtime) performance data metric")
		}
	}(&nagiosExitState, pluginStart)

	// Disable library debug logging output by default
	// vsphere.EnableLogging()
	vsphere.DisableLogging()

	// Setup configuration by parsing user-provided flags. Note plugin type so
	// that only applicable CLI flags are exposed and any plugin-specific
	// settings are applied.
	cfg, cfgErr := config.New(config.PluginType{HostSystemCPU: true})
	switch {
	case errors.Is(cfgErr, config.ErrVersionRequested):
		fmt.Println(config.Version())

		return

	case cfgErr != nil:
		// We're using the standalone Err function from rs/zerolog/log as we
		// do not have a working configuration.
		zlog.Err(cfgErr).Msg("Error initializing application")
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error initializing application",
			nagios.StateCRITICALLabel,
		)
		nagiosExitState.LastError = cfgErr
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	// Enable library-level logging if debug logging level is enabled app-wide
	if cfg.LoggingLevel == config.LogLevelDebug {
		vsphere.EnableLogging()
	}

	// Set context deadline equal to user-specified timeout value for plugin
	// runtime/execution.
	ctx, cancel := context.WithTimeout(context.Background(), cfg.Timeout())
	defer cancel()

	// Record thresholds for use as Nagios "Long Service Output" content. This
	// content is shown in the detailed web UI and in notifications generated
	// by Nagios.
	nagiosExitState.CriticalThreshold = fmt.Sprintf(
		"%d%% CPU usage",
		cfg.HostSystemCPUUseCritical,
	)

	nagiosExitState.WarningThreshold = fmt.Sprintf(
		"%d%% CPU usage",
		cfg.HostSystemCPUUseWarning,
	)

	if cfg.EmitBranding {
		// If enabled, show application details at end of notification
		nagiosExitState.BrandingCallback = config.Branding("Notification generated by ")
	}

	dcName := cfg.DatacenterName
	if dcName == "" {
		dcName = "not provided"
	}

	log := cfg.Log.With().
		Str("host_system_name", cfg.HostSystemName).
		Str("datacenter_name", dcName).
		Int("host_system_cpu_critical_usage", cfg.HostSystemCPUUseCritical).
		Int("host_system_cpu_warning_usage", cfg.HostSystemCPUUseWarning).
		Logger()

	log.Debug().Msg("Logging into vSphere environment")
	c, loginErr := vsphere.Login(
		ctx, cfg.Server, cfg.Port, cfg.TrustCert,
		cfg.Username, cfg.Domain, cfg.Password,
		cfg.UserAgent(),
	)
	if loginErr != nil {
		log.Error().Err(loginErr).Msgf("error logging into %s", cfg.Server)

		nagiosExitState.LastError = loginErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error logging into %q",
			nagios.StateCRITICALLabel,
			cfg.Server,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}
	log.Debug().Msg("Successfully logged into vSphere environment")

	defer func() {
		if err := c.Logout(ctx); err != nil {
			log.Error().
				Err(err).
				Msg("failed to logout")
		}
	}()

	// At this point we're logged in, ready to retrieve the requested
	// HostSystem.

	log.Debug().Msg("Retrieving host by name")
	hostSystem, hsFetchErr := vsphere.GetHostSystemByName(
		ctx,
		c.Client,
		cfg.HostSystemName,
		cfg.DatacenterName,
		true,
	)
	if hsFetchErr != nil {
		log.Error().Err(hsFetchErr).Msg(
			"error retrieving requested host",
		)

		nagiosExitState.LastError = hsFetchErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error retrieving host %q",
			nagios.StateCRITICALLabel,
			cfg.HostSystemName,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}
	log.Debug().Msg("Successfully retrieved host by name")

	log.Debug().Msg("Generating host CPU usage summary")
	hsUsage, hsUsageErr := vsphere.NewHostSystemCPUUsageSummary(
		hostSystem,
		cfg.HostSystemCPUUseCritical,
		cfg.HostSystemCPUUseWarning,
	)
	if hsUsageErr != nil {
		log.Error().Err(hsUsageErr).Msg("error creating host CPU usage summary")

		nagiosExitState.LastError = hsUsageErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error creating host CPU usage summary",
			nagios.StateCRITICALLabel,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().
		Str("host_system_name", hostSystem.Name).
		Float64("host_system_cpu_used_percentage", hsUsage.CPUUsedPercent).
		Float64("host_system_cpu_remaining_percentage", hsUsage.CPURemainingPercent).
		Str("host_system_cpu_total", vsphere.CPUSpeed(hsUsage.CPUTotal).String()).
		Str("host_system_cpu_used", vsphere.CPUSpeed(hsUsage.CPUUsed).String()).
		Str("host_system_cpu_remaining", vsphere.CPUSpeed(hsUsage.CPURemaining).String()).
		Int("host_system_critical_threshold", hsUsage.CriticalThreshold).
		Int("host_system_warning_threshold", hsUsage.WarningThreshold).
		Msg("HostSystem CPU usage summary")

	log.Debug().Msg("Retrieving VMs on host")
	hsVMs, hsVMsFetchErr := vsphere.GetVMsFromContainer(ctx, c.Client, true, hostSystem.ManagedEntity)
	if hsVMsFetchErr != nil {
		log.Error().Err(hsVMsFetchErr).Msg(
			"error retrieving VirtualMachines on host",
		)

		nagiosExitState.LastError = hsVMsFetchErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error retrieving VirtualMachines on host %q",
			nagios.StateCRITICALLabel,
			cfg.HostSystemName,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().
		Str("vms_on_host", strings.Join(vsphere.VMNames(hsVMs), ", ")).
		Msg("Virtual Machines on host")

	// _, numVMsPoweredOff := vsphere.FilterVMsByPowerState(hsVMs, false)
	// numVMsPoweredOn := len(hsVMs) - numVMsPoweredOff

	var numVMsPoweredOn int
	var numVMsPoweredOff int
	for _, vm := range hsVMs {
		switch {
		case vm.Runtime.PowerState == types.VirtualMachinePowerStatePoweredOn:
			numVMsPoweredOn++
		default:
			numVMsPoweredOff++
		}
	}

	log.Debug().Msg("Compiling Performance Data details")

	pd := []nagios.PerformanceData{
		// The `time` (runtime) metric is appended at plugin exit, so do not
		// duplicate it here.
		{
			Label:             "cpu_usage",
			Value:             fmt.Sprintf("%.2f", hsUsage.CPUUsedPercent),
			UnitOfMeasurement: "%",
			Warn:              fmt.Sprintf("%d", cfg.HostSystemCPUUseWarning),
			Crit:              fmt.Sprintf("%d", cfg.HostSystemCPUUseCritical),
		},
		{
			Label:             "cpu_total",
			Value:             fmt.Sprintf("%.2f", hsUsage.CPUTotal),
			UnitOfMeasurement: "Hz",
		},
		{
			Label:             "cpu_used",
			Value:             fmt.Sprintf("%.2f", hsUsage.CPUUsed),
			UnitOfMeasurement: "Hz",
			Max:               fmt.Sprintf("%.2f", hsUsage.CPUTotal),
			Min:               "0",
		},
		{
			Label:             "cpu_remaining",
			Value:             fmt.Sprintf("%.2f", hsUsage.CPURemaining),
			UnitOfMeasurement: "Hz",
			Max:               fmt.Sprintf("%.2f", hsUsage.CPUTotal),
			Min:               "0",
		},
		{
			Label: "vms",
			Value: fmt.Sprintf("%d", len(hsVMs)),
		},
		{
			Label: "vms_powered_off",
			Value: fmt.Sprintf("%d", numVMsPoweredOff),
		},
		{
			Label: "vms_powered_on",
			Value: fmt.Sprintf("%d", numVMsPoweredOn),
		},
	}

	// Update logger with new performance data related fields
	log = log.With().
		Str("host_name", hostSystem.Name).
		Int("vms_total", len(hsVMs)).
		Int("vms_powered_off", numVMsPoweredOff).
		Int("vms_powered_on", numVMsPoweredOn).
		Float64("host_cpu_usage_used_percentage", hsUsage.CPUUsedPercent).
		Float64("host_cpu_usage_remaining_percentage", hsUsage.CPURemainingPercent).
		Str("host_cpu_remaining", vsphere.CPUSpeed(hsUsage.CPURemaining).String()).
		Logger()

	log.Debug().Msg("Evaluating host CPU usage state")
	switch {
	case hsUsage.IsCriticalState():

		log.Error().
			Str("host_name", hostSystem.Name).
			Msg("host CPU usage threshold crossed")

		nagiosExitState.LastError = vsphere.ErrHostSystemCPUUsageThresholdCrossed

		nagiosExitState.ServiceOutput = vsphere.HostSystemCPUUsageOneLineCheckSummary(
			nagios.StateCRITICALLabel,
			hsVMs,
			hsUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.HostSystemCPUUsageReport(
			c.Client,
			hsVMs,
			hsUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return

	case hsUsage.IsWarningState():

		log.Error().Msg("host CPU usage threshold crossed")

		nagiosExitState.LastError = vsphere.ErrHostSystemCPUUsageThresholdCrossed

		nagiosExitState.ServiceOutput = vsphere.HostSystemCPUUsageOneLineCheckSummary(
			nagios.StateWARNINGLabel,
			hsVMs,
			hsUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.HostSystemCPUUsageReport(
			c.Client,
			hsVMs,
			hsUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateWARNINGExitCode

		return

	default:

		log.Debug().Msg("Host CPU usage thresholds not exceeded")

		nagiosExitState.LastError = nil

		nagiosExitState.ServiceOutput = vsphere.HostSystemCPUUsageOneLineCheckSummary(
			nagios.StateOKLabel,
			hsVMs,
			hsUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.HostSystemCPUUsageReport(
			c.Client,
			hsVMs,
			hsUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateOKExitCode

		return

	}

}
