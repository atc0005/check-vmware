// Copyright 2021 Adam Chalkley
//
// https://github.com/atc0005/check-vmware
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package main

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/atc0005/go-nagios"
	"github.com/vmware/govmomi/units"

	"github.com/atc0005/check-vmware/internal/config"
	"github.com/atc0005/check-vmware/internal/vsphere"

	zlog "github.com/rs/zerolog/log"
)

func main() {

	// Start the timer. We'll use this to emit the plugin runtime as a
	// performance data metric.
	pluginStart := time.Now()

	// Set initial "state" as valid, adjust as we go.
	var nagiosExitState = nagios.ExitState{
		LastError:      nil,
		ExitStatusCode: nagios.StateOKExitCode,
	}

	// defer this from the start so it is the last deferred function to run
	defer nagiosExitState.ReturnCheckResults()

	// Collect last minute details just before ending plugin execution.
	defer func(exitState *nagios.ExitState, start time.Time) {

		// Record plugin runtime, emit this metric regardless of exit
		// point/cause.
		runtimeMetric := nagios.PerformanceData{
			Label: "time",
			Value: fmt.Sprintf("%dms", time.Since(start).Milliseconds()),
		}
		if err := exitState.AddPerfData(false, runtimeMetric); err != nil {
			zlog.Error().
				Err(err).
				Msg("failed to add time (runtime) performance data metric")
		}

		// Annotate errors (if applicable) with additional context to aid in
		// troubleshooting.
		nagiosExitState.LastError = vsphere.AnnotateError(nagiosExitState.LastError)
	}(&nagiosExitState, pluginStart)

	// Disable library debug logging output by default
	// vsphere.EnableLogging()
	vsphere.DisableLogging()

	// Setup configuration by parsing user-provided flags. Note plugin type so
	// that only applicable CLI flags are exposed and any plugin-specific
	// settings are applied.
	cfg, cfgErr := config.New(config.PluginType{DatastoresSpace: true})
	switch {
	case errors.Is(cfgErr, config.ErrVersionRequested):
		fmt.Println(config.Version())

		return

	case cfgErr != nil:
		// We're using the standalone Err function from rs/zerolog/log as we
		// do not have a working configuration.
		zlog.Err(cfgErr).Msg("Error initializing application")
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error initializing application",
			nagios.StateCRITICALLabel,
		)
		nagiosExitState.LastError = cfgErr
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	// Enable library-level logging if debug logging level is enabled app-wide
	if cfg.LoggingLevel == config.LogLevelDebug {
		vsphere.EnableLogging()
	}

	// Set context deadline equal to user-specified timeout value for plugin
	// runtime/execution.
	ctx, cancel := context.WithTimeout(context.Background(), cfg.Timeout())
	defer cancel()

	// Record thresholds for use as Nagios "Long Service Output" content. This
	// content is shown in the detailed web UI and in notifications generated
	// by Nagios.
	nagiosExitState.CriticalThreshold = fmt.Sprintf(
		"%d%% datastore usage",
		cfg.DatastoreSpaceUsageCritical,
	)

	nagiosExitState.WarningThreshold = fmt.Sprintf(
		"%d%% datastore usage",
		cfg.DatastoreSpaceUsageWarning,
	)

	if cfg.EmitBranding {
		// If enabled, show application details at end of notification
		nagiosExitState.BrandingCallback = config.Branding("Notification generated by ")
	}

	dcName := cfg.DatacenterName
	if dcName == "" {
		dcName = "not provided"
	}

	log := cfg.Log.With().
		Str("datastore_name", cfg.DatastoreName).
		Str("datacenter_name", dcName).
		Int("datastore_critical_usage", cfg.DatastoreSpaceUsageCritical).
		Int("datastore_warning_usage", cfg.DatastoreSpaceUsageWarning).
		Logger()

	log.Debug().Msg("Logging into vSphere environment")
	c, loginErr := vsphere.Login(
		ctx, cfg.Server, cfg.Port, cfg.TrustCert,
		cfg.Username, cfg.Domain, cfg.Password,
		cfg.UserAgent(),
	)
	if loginErr != nil {
		log.Error().Err(loginErr).Msgf("error logging into %s", cfg.Server)

		nagiosExitState.LastError = loginErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error logging into %q",
			nagios.StateCRITICALLabel,
			cfg.Server,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}
	log.Debug().Msg("Successfully logged into vSphere environment")

	defer func() {
		if err := c.Logout(ctx); err != nil {
			log.Error().
				Err(err).
				Msg("failed to logout")
		}
	}()

	// At this point we're logged in, ready to retrieve the requested
	// datastore.

	log.Debug().Msg("Retrieving datastore by name")
	datastore, dsFetchErr := vsphere.GetDatastoreByName(
		ctx,
		c.Client,
		cfg.DatastoreName,
		cfg.DatacenterName,
		true,
	)
	if dsFetchErr != nil {
		log.Error().Err(dsFetchErr).Msg(
			"error retrieving requested datastore",
		)

		nagiosExitState.LastError = dsFetchErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error retrieving datastore %q",
			nagios.StateCRITICALLabel,
			cfg.DatastoreName,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().Msg("Successfully retrieved datastore by name")

	log.Debug().Msg("Asserting that datastore is accessible; metadata from an inaccessible datastore is unreliable")
	dsInaccessibleReasons, dsAccessibilityErr := vsphere.ValidateDatastoreAccessibility(datastore)
	if dsAccessibilityErr != nil {
		log.Error().Err(dsAccessibilityErr).
			Str("reasons", strings.Join(dsInaccessibleReasons, ", ")).
			Msg("datastore is inaccessible")

		nagiosExitState.LastError = dsAccessibilityErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Datastore %q is inaccessible due to: [%s]",
			nagios.StateCRITICALLabel,
			cfg.DatastoreName,
			strings.Join(dsInaccessibleReasons, ", "),
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().Msg("Successfully asserted that datastore is accessible")

	log.Debug().Msg("Generating datastore usage summary")
	dsSpaceUsage, dsSpaceUsageErr := vsphere.NewDatastoreSpaceUsageSummary(
		ctx,
		c.Client,
		datastore,
		cfg.DatastoreSpaceUsageCritical,
		cfg.DatastoreSpaceUsageWarning,
	)
	if dsSpaceUsageErr != nil {
		log.Error().Err(dsSpaceUsageErr).Msg(
			"error generating datastore usage summary",
		)

		nagiosExitState.LastError = dsSpaceUsageErr
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error generating summary for datastore %q",
			nagios.StateCRITICALLabel,
			cfg.DatastoreName,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	log.Debug().Msg("Successfully generated datastore usage summary")

	log.Debug().
		Str("datastore_name", datastore.Name).
		Float64("datastore_usage_used_percentage", dsSpaceUsage.StorageUsedPercent).
		Float64("datastore_usage_remaining_percentage", dsSpaceUsage.StorageRemainingPercent).
		Str("datastore_space_total", units.ByteSize(dsSpaceUsage.StorageTotal).String()).
		Str("datastore_space_used", units.ByteSize(dsSpaceUsage.StorageUsed).String()).
		Str("datastore_space_remaining", units.ByteSize(dsSpaceUsage.StorageRemaining).String()).
		Int("datastore_critical_threshold", dsSpaceUsage.CriticalThreshold).
		Int("datastore_warning_threshold", dsSpaceUsage.WarningThreshold).
		Int("vms", len(dsSpaceUsage.VMs)).
		Int("vms_powered_off", dsSpaceUsage.VMs.NumVMsPoweredOff()).
		Int("vms_powered_on", dsSpaceUsage.VMs.NumVMsPoweredOn()).
		Msg("Datastore usage summary")

	log.Debug().Msg("Compiling Performance Data details")

	pd := []nagios.PerformanceData{
		// The `time` (runtime) metric is appended at plugin exit, so do not
		// duplicate it here.
		{
			Label:             "datastore_space_usage",
			Value:             fmt.Sprintf("%.2f", dsSpaceUsage.StorageUsedPercent),
			UnitOfMeasurement: "%",
			Warn:              fmt.Sprintf("%d", dsSpaceUsage.WarningThreshold),
			Crit:              fmt.Sprintf("%d", dsSpaceUsage.CriticalThreshold),
		},
		{
			Label:             "datastore_space_used",
			Value:             fmt.Sprintf("%d", dsSpaceUsage.StorageUsed),
			UnitOfMeasurement: "B",
		},
		{
			Label:             "datastore_space_remaining",
			Value:             fmt.Sprintf("%d", dsSpaceUsage.StorageRemaining),
			UnitOfMeasurement: "B",
		},
		{
			Label: "vms",
			Value: fmt.Sprintf("%d", len(dsSpaceUsage.VMs)),
		},
		{
			Label: "vms_powered_off",
			Value: fmt.Sprintf("%d", dsSpaceUsage.VMs.NumVMsPoweredOff()),
		},
		{
			Label: "vms_powered_on",
			Value: fmt.Sprintf("%d", dsSpaceUsage.VMs.NumVMsPoweredOn()),
		},
	}

	// Update logger with new performance data related fields
	log = log.With().
		Str("datastore_name", datastore.Name).
		Float64("datastore_usage_used_percentage", dsSpaceUsage.StorageUsedPercent).
		Float64("datastore_usage_remaining_percentage", dsSpaceUsage.StorageRemainingPercent).
		Str("datastore_space_total", units.ByteSize(dsSpaceUsage.StorageTotal).String()).
		Str("datastore_space_used", units.ByteSize(dsSpaceUsage.StorageUsed).String()).
		Str("datastore_space_remaining", units.ByteSize(dsSpaceUsage.StorageRemaining).String()).
		Int("datastore_critical_threshold", dsSpaceUsage.CriticalThreshold).
		Int("datastore_warning_threshold", dsSpaceUsage.WarningThreshold).
		Int("vms", len(dsSpaceUsage.VMs)).
		Int("vms_powered_off", dsSpaceUsage.VMs.NumVMsPoweredOff()).
		Int("vms_powered_on", dsSpaceUsage.VMs.NumVMsPoweredOn()).
		Logger()

	log.Debug().Msg("Evaluating datastore usage state")
	switch {
	case dsSpaceUsage.IsCriticalState():

		log.Error().Msg("Datastore usage CRITICAL")

		nagiosExitState.LastError = vsphere.ErrDatastoreSpaceUsageThresholdCrossed

		nagiosExitState.ServiceOutput = vsphere.DatastoreSpaceUsageOneLineCheckSummary(
			nagios.StateCRITICALLabel,
			dsSpaceUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.DatastoreSpaceUsageReport(
			c.Client,
			dsSpaceUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return

	case dsSpaceUsage.IsWarningState():

		log.Error().Msg("Datastore usage WARNING")

		nagiosExitState.LastError = vsphere.ErrDatastoreSpaceUsageThresholdCrossed

		nagiosExitState.ServiceOutput = vsphere.DatastoreSpaceUsageOneLineCheckSummary(
			nagios.StateWARNINGLabel,
			dsSpaceUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.DatastoreSpaceUsageReport(
			c.Client,
			dsSpaceUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateWARNINGExitCode

		return

	default:

		log.Debug().Msg("Datastore usage within specified thresholds")

		nagiosExitState.LastError = nil

		nagiosExitState.ServiceOutput = vsphere.DatastoreSpaceUsageOneLineCheckSummary(
			nagios.StateOKLabel,
			dsSpaceUsage,
		)

		nagiosExitState.LongServiceOutput = vsphere.DatastoreSpaceUsageReport(
			c.Client,
			dsSpaceUsage,
		)

		if err := nagiosExitState.AddPerfData(false, pd...); err != nil {
			log.Error().
				Err(err).
				Msg("failed to add performance data")
		}

		nagiosExitState.ExitStatusCode = nagios.StateOKExitCode

		return

	}

}
