# Copyright 2021 Adam Chalkley
#
# https://github.com/atc0005/check-vmware
#
# Licensed under the MIT License. See LICENSE file in the project root for
# full license information.

name: Vulnerability Analysis

# Run Workflow for Pull Requests (new, updated)
# `synchronized` seems to equate to pushing new commits to a linked branch
# (whether force-pushed or not)
on:
  push:
    branches: [master]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
    types: [opened, synchronize]
  schedule:
    # ┌───────────── minute (0 - 59)
    # │ ┌───────────── hour (0 - 23)
    # │ │ ┌───────────── day of the month (1 - 31)
    # │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    # │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    # │ │ │ │ │
    # │ │ │ │ │
    # │ │ │ │ │
    # * * * * *
    - cron: "19 2 * * 0"

jobs:
  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    # Default: 360 minutes
    timeout-minutes: 10
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["go"]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2.1.22
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2.1.22

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 https://git.io/JvXDl

      # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2.1.22

  govulncheck:
    # https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck
    # https://github.com/golang/vuln
    # https://github.com/atc0005/go-ci/issues/734
    name: govulncheck
    runs-on: ubuntu-latest
    timeout-minutes: 10
    container:
      image: ghcr.io/atc0005/go-ci:go-ci-lint-only

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Analyze source code
        run: |
          govulncheck -json ./...

      - name: Build binaries
        run: |
          go build -v -mod=vendor ./cmd/check_vmware_tools
          go build -v -mod=vendor ./cmd/check_vmware_vcpus
          go build -v -mod=vendor ./cmd/check_vmware_vhw
          go build -v -mod=vendor ./cmd/check_vmware_hs2ds2vms
          go build -v -mod=vendor ./cmd/check_vmware_datastore_space
          go build -v -mod=vendor ./cmd/check_vmware_datastore_performance
          go build -v -mod=vendor ./cmd/check_vmware_snapshots_age
          go build -v -mod=vendor ./cmd/check_vmware_snapshots_count
          go build -v -mod=vendor ./cmd/check_vmware_snapshots_size
          go build -v -mod=vendor ./cmd/check_vmware_rps_memory
          go build -v -mod=vendor ./cmd/check_vmware_host_memory
          go build -v -mod=vendor ./cmd/check_vmware_host_cpu
          go build -v -mod=vendor ./cmd/check_vmware_vm_power_uptime
          go build -v -mod=vendor ./cmd/check_vmware_disk_consolidation
          go build -v -mod=vendor ./cmd/check_vmware_question
          go build -v -mod=vendor ./cmd/check_vmware_alarms
          go build -v -mod=vendor ./cmd/check_vmware_vm_backup_via_ca

      - name: Analyze binaries
        run: |
          echo "Scanning check_vmware_tools plugin"
          govulncheck -json ./check_vmware_tools

          echo "Scanning check_vmware_vcpus plugin"
          govulncheck -json ./check_vmware_vcpus

          echo "Scanning check_vmware_vhw plugin"
          govulncheck -json ./check_vmware_vhw

          echo "Scanning check_vmware_hs2ds2vms plugin"
          govulncheck -json ./check_vmware_hs2ds2vms

          echo "Scanning check_vmware_datastore_space plugin"
          govulncheck -json ./check_vmware_datastore_space

          echo "Scanning check_vmware_datastore_performance plugin"
          govulncheck -json ./check_vmware_datastore_performance

          echo "Scanning check_vmware_snapshots_age plugin"
          govulncheck -json ./check_vmware_snapshots_age

          echo "Scanning check_vmware_snapshots_count plugin"
          govulncheck -json /check_vmware_snapshots_count

          echo "Scanning check_vmware_snapshots_size plugin"
          govulncheck -json ./check_vmware_snapshots_size

          echo "Scanning check_vmware_rps_memory plugin"
          govulncheck -json ./check_vmware_rps_memory

          echo "Scanning check_vmware_host_memory plugin"
          govulncheck -json ./check_vmware_host_memory

          echo "Scanning check_vmware_host_cpu plugin"
          govulncheck -json ./check_vmware_host_cpu

          echo "Scanning check_vmware_vm_power_uptime plugin"
          govulncheck -json ./check_vmware_vm_power_uptime

          echo "Scanning check_vmware_disk_consolidation plugin"
          govulncheck -json ./check_vmware_disk_consolidation

          echo "Scanning check_vmware_question plugin"
          govulncheck -json ./check_vmware_question

          echo "Scanning check_vmware_alarms plugin"
          govulncheck -json ./check_vmware_alarms

          echo "Scanning check_vmware_vm_backup_via_ca plugin"
          govulncheck -json ./check_vmware_vm_backup_via_ca
